# -*- coding: utf-8 -*-
"""Solution-Module-1-Lab-cuda-pycuda.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m5QIZ441UNJ-AlxlRLtggvGcIOU449Qa

# **Exercise**

Perform element-wise squaring of numbers in a matrix using the gpuarray class.

PyCUDA provides a gpuarray class, similar to numpy, that stores its data and performs its computations on the GPU device. The shape and datatype of the arrays work exactly as in numpy.

The gpuarray class provides many arithmetic methods for computations. It removes the need to specify the kernel code in C or C++ using SourceModule. So, the PyCUDA code will contain only a Python code. The code of squaring every element of the matrix using the gpuarray class is shown as follows:
"""

# import gpuarray class
!pip install pycuda 
import pycuda
import pycuda.driver as cuda
cuda.init()

import pycuda.autoinit
from pycuda.compiler import SourceModule
import pycuda.gpuarray as gpuarray


start = drv.Event()
end=drv.Event()
start.record()
start.synchronize()

#initialize the matrix with random integers
h_b = numpy.random.randint(1,5,(5, 5))

#upload the matrix to the device memory using to_gpu method
#the matrix is converted to a single precision number
d_b = gpuarray.to_gpu(h_b.astype(numpy.float32))
h_result = (d_b**2).get()
end.record()
end.synchronize()

"""All the operations on this uploaded matrix will be performed on the device. The square operation is performed in a similar way as we do in Python code but, as the variable is stored on the device using gpuarray, this operation will also be performed on the device. The result is downloaded back to the host by using the get method. This result along with the time needed to perform element-wise squaring using gpuarray is displayed on the console as follows:"""

print("original array:")
print(h_b)
print("doubled with gpuarray:")
print(h_result)
secs = start.time_till(end)*1e-3
print("Time of Squaring on GPU with gpuarray")
print("%fs" % (secs))

"""It completely removes the need to define kernel functions in C language, and its functionality is similar to the numpy library so Python programmers can easily work with it.

To summarize the task, we have developed an element-wise squaring program using the gpuarray class in PyCUDA. 
"""