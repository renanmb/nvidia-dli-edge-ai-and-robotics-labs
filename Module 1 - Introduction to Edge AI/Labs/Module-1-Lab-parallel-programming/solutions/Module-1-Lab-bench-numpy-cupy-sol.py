# -*- coding: utf-8 -*-
"""Solution-Module-1-Lab-bench-numpy-cupy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pqaEtMZPCpVZhGBmzh6Dar9QWveW4zat

# **Exercise**
You can also find other operations from [the comparison table](https://docs.cupy.dev/en/stable/reference/comparison.html).

Use the following operations do NumPy and CuPy implementation and then benchmark the times. 
- numpy.absolute | cupy.absolute
- numpy.median | cupy.median
- numpy.resize | cupy.resize
- numpy.shape | cupy.shape
- numpy.ndarray.fill() | cupy.ndarray.fill()
"""

# import libraries
import numpy as np
import cupy as cp

#absolute
x = np.arange(-200,300)
y = cp.arange(-200,300)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# np.absolute(x)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# cp.absolute(y)

# Commented out IPython magic to ensure Python compatibility.
# #median
# %%time
# np.median(x)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# cp.median(y)

# Commented out IPython magic to ensure Python compatibility.
# #resize
# %%time
# x1 = np.resize(x,(2,100))

# Commented out IPython magic to ensure Python compatibility.
# %%time
# y1 = cp.resize(y,(2,100))

#shape
print(x1.shape)
print(y1.shape)

# Commented out IPython magic to ensure Python compatibility.
# #fill()
# %%time
# x1.fill(18)

# Commented out IPython magic to ensure Python compatibility.
# %%time
# y1.fill(27)

print(x1)
print(y1)
print(x1.shape)
print(y1.shape)

